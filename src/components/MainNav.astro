---
import { Image } from 'astro:assets';
import astroLogoSpread from '@images/astro/astro-9.svg';
import astroLogoBook from '@images/astro/astro-6.svg';
import astroLogoGame from '@images/astro/astro-10.svg';
import astroLogoPencil from '@images/astro/astro-8.svg';
import astroLogoDesk from '@images/astro/astro-3.svg';

interface NavigationLinks {
  [key: string]: string;
}

const baseURL = import.meta.env.BASE_URL;
const pathname = Astro.url.pathname;

const obj: NavigationLinks = {
  home: `${baseURL}`,
  cookbook: `${baseURL}cookbook/`,
  gaming: `${baseURL}games/`,
  // blog: `${baseURL}blog/`
};

let astroLogo = astroLogoSpread;

if (pathname.includes('cookbook')) {
  astroLogo = astroLogoBook;
} else if (pathname.includes('games')) {
  astroLogo = astroLogoGame;
} else if (pathname.includes('blog')) {
  astroLogo = astroLogoPencil;
} else if (pathname.includes('style')) {
  astroLogo = astroLogoDesk;
}

// If on homepage, don't include the 'href' attribute on the link element
const homepageLinkAttributes = pathname === baseURL ? {} : { href: baseURL };

const nonLinkClasses =
  'text-light/60 hover:text-light/60 dark:text-light/60 dark:hover:text-light/60 w-max px-3 py-2 uppercase text-sm';
const linkClasses =
  'text-light hover:text-green-emerald hover:scale-110 transition-all w-max px-3 py-2 uppercase text-sm';

const navItems: string[] = Object.keys(obj).map(
  (key) =>
    `<li class='flex items-center'>
      ${pathname === obj[key] ? `<span class="${nonLinkClasses}">${key}</span>` : `<a role="link" href="${obj[key]}" class="${linkClasses}">${key}</a>`}
  </li>`,
);
---

<nav
  class="z-30 py-4 bg-dark text-light bg-linear-to-tr from-blue-dark/60 to-blue-darfrom-blue-dark/10 hover:from-blue-dark/80 transition-all laptop:sticky laptop:top-0"
>
  <div class="container flex flex-wrap justify-between items-center gap-y-2">
    <a href="#main" class="skip-link">Skip to content</a>

    <div class="flex items-center group">
      <Image
        loading="eager"
        src={astroLogo}
        alt="David’s Place Logo - An astronaut"
        title="David’s Place Logo - An astronaut"
        class={pathname === baseURL
          ? 'h-10 tablet:h-12 w-auto'
          : 'h-10 tablet:h-12 w-auto group-hover:-rotate-12 transition-all'}
      />
      {
        pathname === baseURL ? (
          <span class="px-4 py-2">David’s Place</span>
        ) : (
          <a
            role="link"
            {...homepageLinkAttributes}
            class="px-4 py-2 group-hover:text-green-emerald group-hover:scale-110 transition-all"
            aria-label="David’s Place Homepage"
          >
            David’s Place
          </a>
        )
      }
    </div>

    <div class="flex items-center gap-4">
      <!-- Nav items visible on tablet+ -->
      <ul class="hidden laptop:flex items-center gap-3" set:html={navItems} />

      <fieldset class="flex flex-col gap-1 items-center">
        <legend class="sr-only">Select Dark Mode:</legend>
        <input
          type="checkbox"
          id="darkModeSwitch"
          checked="true"
          class="transition-all before:transition-all duration-500 before:duration-500 relative appearance-none w-12 h-6 rounded-full bg-light/75 hover:cursor-pointer hover:brightness-125 before:content-[''] before:w-4 before:h-4 before:rounded-full before:bg-blue-dark before:absolute before:top-1/2 before:left-1 before:-translate-y-1/2 checked:bg-blue-dark checked:before:bg-accent-light checked:before:left-7"
        />
        <label
          for="darkModeSwitch"
          class="text-center text-xs opacity-75 hover:cursor-pointer w-[70px]"
          >Dark Mode</label
        >
      </fieldset>

      <div class="flex items-center gap-2">
        <button
          id="font-decrease"
          class="duration-300 min-w-10 min-h-5 px-1 py-1 flex items-center justify-center border-b border-light/10 hover:border-green-emerald active:border-light/10"
          aria-label="Decrease Font Size">A-</button
        >
        <span
          ><span class="sr-only">Current font size:</span><span id="font-size"
            >16</span
          ></span
        >
        <button
          id="font-increase"
          class="duration-300 min-w-10 min-h-5 px-1 py-1 flex items-center justify-center border-b-2 border-light/10 hover:border-green-emerald active:border-light/10"
          aria-label="Increase Font Size">A+</button
        >
      </div>
    </div>
  </div>

  <!-- Nav items visible on mobile only -->
  <div class="container laptop:hidden">
    <span class="block my-4 border-t border-t-green-emerald"></span>
    <ul
      class="flex flex-wrap justify-center items-center gap-x-4 gap-y-2"
      set:html={navItems}
    />
  </div>
</nav>

<style>
  .skip-link {
    position: absolute;
    top: calc(var(--spacing) * 5);
    left: calc(1 / 2 * 100%);
    --tw-translate-x: calc(calc(1 / 2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
    --tw-translate-y: calc(175% * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
    width: max-content;
    background-color: var(--color-dark);
    color: var(--color-light);
    padding-inline: calc(var(--spacing) * 5);
    height: calc(var(--spacing) * 10);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 40;
    border-bottom-right-radius: var(--radius-lg);
    border-bottom-left-radius: var(--radius-lg);
    font-family: var(--font-mono);
    text-transform: uppercase;
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    transition-property: all;
    transition-timing-function: var(
      --tw-ease,
      var(--default-transition-timing-function)
    );
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }

  .skip-link:focus {
    --tw-translate-y: calc(calc(1 / 2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
</style>

<script is:inline>
  function applyTheme() {
    // Set theme based on local storage or prefers-color-scheme
    const darkModeSwitch = document.getElementById('darkModeSwitch');
    const darkModeLabel = document.querySelector('label[for="darkModeSwitch"]');

    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');

      if (darkModeSwitch && darkModeLabel) {
        darkModeSwitch.checked = true;
        darkModeSwitch.setAttribute('aria-checked', true);
        darkModeLabel.textContent = 'Dark Mode';
      }
    } else {
      document.documentElement.classList.remove('dark');

      if (darkModeSwitch && darkModeLabel) {
        darkModeSwitch.checked = false;
        darkModeSwitch.setAttribute('aria-checked', false);
        darkModeLabel.textContent = 'Light Mode';
      }
    }
  }

  function setTheme(event) {
    // Set local storage theme based on checked state of switch
    localStorage.theme = event.target.checked ? 'dark' : 'light';
    applyTheme();
  }

  document.addEventListener('astro:after-swap', applyTheme);
  document.addEventListener('astro:page-load', () => {
    document
      .getElementById('darkModeSwitch')
      ?.addEventListener('click', setTheme);
  });

  applyTheme();
</script>

<script is:inline>
  function applyFontSize() {
    // Set font size based on local storage or default
    const root = document.documentElement;
    const currentFontSize = parseFloat(getComputedStyle(root).fontSize);
    const storedFontSize = localStorage.fontSize;

    console.log(currentFontSize, storedFontSize);

    if (storedFontSize && storedFontSize !== currentFontSize) {
      root.style.fontSize = `${storedFontSize}px`;
      document.getElementById('font-size').textContent = storedFontSize;
    } else {
      document.getElementById('font-size').textContent = currentFontSize;
    }
  }

  document.addEventListener('astro:after-swap', applyFontSize);
  document.addEventListener('astro:page-load', () => {
    document.getElementById('font-decrease')?.addEventListener('click', () => {
      const root = document.documentElement;
      const currentFontSize = parseFloat(getComputedStyle(root).fontSize);
      const newFontSize = currentFontSize - 1;
      localStorage.fontSize = newFontSize;
      applyFontSize();
    });

    document.getElementById('font-increase')?.addEventListener('click', () => {
      const root = document.documentElement;
      const currentFontSize = parseFloat(getComputedStyle(root).fontSize);
      const newFontSize = currentFontSize + 1;
      localStorage.fontSize = newFontSize;
      applyFontSize();
    });
  });

  applyFontSize();
</script>
