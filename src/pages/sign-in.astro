---
import { app } from '../firebase/server';
import { getAuth } from 'firebase-admin/auth';
import Base from '@layouts/Base.astro';
import { Image, getImage } from 'astro:assets';

import imageFlowerFrame from '@images/general/background-flower-frame.jpg';
import imageLaptop from '@images/general/background-laptop.jpg';
import imageCatAndPlants from '@images/general/background-cat-and-plants.jpg';
import imageCatsPeeking from '@images/general/background-cats-peeking.jpg';
import imageBreakfastTable from '@images/general/background-breakfast-table.jpg';
import imageEveningTable from '@images/general/background-evening-table.jpg';
import imageCozyCoupleInside from '@images/general/background-cozy-couple-inside.jpg';

import IconEye from '@images/icons/eye.svg';
import IconArrowRightBlue from '@images/icons/arrow-bubbles-right-blue.svg';
import IconArrowRightGreen from '@images/icons/arrow-bubbles-right-green.svg';

/* Check if the user is authenticated */
const auth = getAuth(app);

if (Astro.cookies.has('__session')) {
  const sessionCookie = Astro.cookies.get('__session')!.value;
  try {
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect('/dashboard/');
    }
  } catch (error) {
    // Invalid or expired session cookie - clear it and continue to sign in page
    Astro.cookies.delete('__session', { path: '/' });
  }
}

const imageOptions = [
  {
    image: imageFlowerFrame,
    alt: 'White frame with bright flowers around it - background for sign-in page',
    source: 'https://pixabay.com/users/hollanddesign-15443332/',
  },
  {
    image: imageLaptop,
    alt: 'Laptop open on green table with succulents, phone, and stationery - background for sign-in page',
    source: 'https://pixabay.com/users/nietjuhart-30460544/',
  },
  {
    image: imageCatAndPlants,
    alt: 'Black cat hiding behind three potted plants - background for sign-in page',
    source: 'https://pixabay.com/users/biancavandijk-9606149/',
  },
  {
    image: imageCatsPeeking,
    alt: 'A black cat poking its head around a corner with a white cat below it doing the same - background for sign-in page',
    source: 'https://pixabay.com/users/biancavandijk-9606149/',
  },
  {
    image: imageBreakfastTable,
    alt: 'Breakfast table with tea, book, and plant under an archlamp with a desk and plant - background for sign-in page',
    source: 'https://pixabay.com/users/nietjuhart-30460544/',
  },
  {
    image: imageEveningTable,
    alt: 'Evening table with a stack of books, tea, and flowers in a vase with a chair and ceiling lamp - background for sign-in page',
    source: 'https://pixabay.com/users/nietjuhart-30460544/',
  },
  {
    image: imageCozyCoupleInside,
    alt: 'Cozy couple sitting inside by a window with reading with snow outside - background for sign-in page',
    source: 'https://pixabay.com/users/ninikvaratskhelia_-15913392/',
  },
];

const randomIndex = Math.floor(Math.random() * imageOptions.length);
const selectedImage = imageOptions[randomIndex];
const optimizedImage = await getImage({
  src: selectedImage.image,
  format: 'webp',
});
const preloadImageData = {
  src: optimizedImage.src,
  format: 'webp',
  pathname: Astro.url.pathname,
};
---

<Base
  title="Sign in to Your Account to View Your Content and Contributions"
  description="Sign in to your account at Davidâ€™s Place to access your content and features. Manage your recipes, blog posts, and discussions all in one place."
  preloadImage={preloadImageData}
  classes="flex flex-col justify-between"
>
  <div class="grid grid-cols-1 tablet:grid-cols-5 flex-grow">
    <header
      class="tablet:col-span-2 container relative flex justify-center items-center min-h-[450px] tablet:min-h-full"
    >
      <div
        class="z-10 max-w-full w-max flex flex-col gap-5 items-center text-center text-green-darker px-8 pt-8 pb-4 bg-light/80 backdrop-blur-sm shadow-[0_0_30px_-5px_rgba(255,255,255,0.75)]"
      >
        <h1 class="max-w-full w-max font-semibold tracking-tight">
          Sign in to<br />your account
        </h1>

        <a
          href="/register/"
          class="text-sm content-link-gradient max-w-full w-max font-sans-syne p-1.5"
          >Or create an account</a
        >
      </div>

      <a
        href={selectedImage.source}
        class="z-10 absolute bottom-2 left-2 text-green-darker/80 text-sm content-link-gradient max-w-full w-max font-sans-syne p-1.5"
        >Image via Pixabay</a
      >

      <Image
        src={selectedImage.image}
        alt={selectedImage.alt}
        loading="eager"
        fetchpriority="high"
        decoding="async"
        class="absolute top-0 left-0 w-full h-full object-cover"
      />
    </header>

    <section
      class="tablet:col-span-3 container relative flex flex-col justify-center items-center bg-red-dark/90 dark:bg-blue-darkest/90"
    >
      <span class="block pb-14 tablet:pb-20"></span>
      <form
        id="sign-in-form"
        action="/api/auth/sign-in"
        method="post"
        class="relative bg-light/90 dark:bg-medium/90 dark:text-light border border-light w-full max-w-[475px] tablet:max-w-[600px] tablet:mx-auto p-8 rounded-4xl laptop:rounded-none flex flex-col gap-8 shadow-[0_0_30px_-5px_rgba(0,0,0,0.75)]"
      >
        <p class="pt-4 font-sans-syne text-xl">
          Sign in with your email and password
        </p>

        <span class="relative group">
          <label
            for="email"
            class="absolute transition-[top,font-size,color,letter-spacing,font-weight] duration-500"
            >Email</label
          >
          <input
            type="email"
            name="email"
            id="email"
            required
            autocomplete="email"
            class="text-lg w-full border-b border-gray-800 dark:border-gray-300 pb-px focus-visible:border-green-dark dark:focus-visible:border-green-emerald focus-visible:ring-0 transition-[border-color] duration-500 group-focus-within:border-b-2 group-focus-within:pb-0"
          />
        </span>

        <span class="relative group flex gap-4">
          <label
            for="password"
            class="absolute transition-[top,font-size,color,letter-spacing,font-weight] duration-500"
            >Password</label
          >
          <input
            type="password"
            name="password"
            id="password"
            required
            autocomplete="new-password"
            class="text-lg w-full border-b border-gray-800 dark:border-gray-300 pb-px focus-visible:border-green-dark dark:focus-visible:border-green-emerald focus-visible:ring-0 transition-[border-color] duration-500 group-focus-within:border-b-2 group-focus-within:pb-0"
          />
          <button
            id="toggle-password-visibility"
            aria-pressed="false"
            class="shrink-0"
          >
            <span class="sr-only">Toggle password visibility</span>
            <IconEye
              id="toggle-password-visibility-icon"
              class="w-8 h-8 fill-dark dark:fill-light"
            />
          </button>
        </span>

        <button
          type="submit"
          class="group inline-block w-max mt-4 font-bold text-lg tracking-wide px-5 py-2 text-light shadow-2xl shadow-dark bg-green-darker hover:bg-blue-dark dark:bg-blue-darker dark:hover:bg-green-darker rounded-4xl active:brightness-75 disabled:brightness-75 disabled:bg-blue-darker dark:disabled:bg-green-darker transition-colors duration-500 dark:outline-1 dark:outline-light"
        >
          <span class="flex items-center gap-2">
            <span>LOG IN</span>
            <IconArrowRightGreen
              class="hidden dark:flex relative right-0 h-5 w-5 group-hover:-right-1.5 group-disabled:-right-1.5 transition-[right] duration-500"
            />
            <IconArrowRightBlue
              class="flex dark:hidden relative right-0 h-5 w-5 group-hover:-right-1.5 group-disabled:-right-1.5 transition-[right] duration-500"
            />
          </span>
        </button>

        <p
          id="sign-in-error"
          class="opacity-0 text-red-500 tracking-tight font-mono font-bold text-lg leading-8 transition-opacity duration-500"
        >
          *Error signing in
        </p>
      </form>

      <span class="block pb-14 tablet:pb-20"></span>
    </section>
  </div>
</Base>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from 'firebase/auth';
  import { app } from '../firebase/client';

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  function initializeSignInForm() {
    const form = document.getElementById('sign-in-form') as HTMLFormElement;
    const errorDisplay = document.getElementById(
      'sign-in-error',
    ) as HTMLParagraphElement;

    if (!form || !errorDisplay) {
      console.warn('Sign-in form or error display not found');
      return;
    }

    const formInputs = form.querySelectorAll(
      'input',
    ) as NodeListOf<HTMLInputElement>;

    // Cache labels by input id for better perf
    const labelMap = new Map<string, HTMLElement | null>();
    formInputs.forEach((input) => {
      labelMap.set(input.id, form.querySelector(`label[for="${input.id}"]`));
    });

    const styleLabel = (label: Element, isActive: boolean) => {
      if (isActive) {
        label.classList.add(
          'text-[12px]',
          '-top-4',
          'text-green-dark',
          'dark:text-green-emerald',
          'tracking-wider',
          'font-bold',
        );
        label.classList.remove('text-[16px]', 'leading-4', 'top-0');
      } else {
        label.classList.remove(
          'text-[12px]',
          '-top-4',
          'text-green-dark',
          'dark:text-green-emerald',
          'tracking-wider',
          'font-bold',
        );
        label.classList.add('text-[16px]', 'leading-4', 'top-0');
      }
    };

    // On focus, make label "active"
    formInputs.forEach((input) => {
      const label = labelMap.get(input.id) || null;

      input.addEventListener('focus', () => {
        if (label) styleLabel(label, true);
      });

      // On blur, if input is empty, make label inactive
      input.addEventListener('blur', () => {
        if (label) styleLabel(label, !!input.value);
      });

      // Initialize label from current value
      if (label) styleLabel(label, !!input.value);
    });

    // Toggle password visibility
    const togglePasswordButton = form.querySelector(
      '#toggle-password-visibility',
    ) as HTMLButtonElement;

    if (togglePasswordButton) {
      const passwordInput = form.querySelector('#password') as HTMLInputElement;
      const icon = togglePasswordButton.querySelector('svg');

      togglePasswordButton.addEventListener('click', (e) => {
        e.preventDefault();

        if (passwordInput && icon) {
          const isPressed =
            togglePasswordButton.getAttribute('aria-pressed') === 'true';

          togglePasswordButton.setAttribute('aria-pressed', String(!isPressed));

          passwordInput.type = isPressed ? 'password' : 'text';

          if (isPressed) {
            icon.classList.remove('fill-green-darker', 'dark:fill-green-dark');
            icon.classList.add('fill-dark', 'dark:fill-light');
          } else {
            icon.classList.remove('fill-dark', 'dark:fill-light');
            icon.classList.add('fill-green-darker', 'dark:fill-green-dark');
          }

          passwordInput.focus();
        }
      });
    }

    // Hide error message when user starts typing
    form.addEventListener('input', () => {
      errorDisplay.classList.add('opacity-0');
    });

    // Prevent duplicate submits, use timeout for fetch
    let isSubmitting = false;
    const submitButton = form.querySelector(
      'button[type="submit"]',
    ) as HTMLButtonElement;

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const email = formData.get('email')?.toString();
      const password = formData.get('password')?.toString();

      if (!email || !password) {
        return;
      }

      if (isSubmitting) return;
      isSubmitting = true;

      if (submitButton) {
        submitButton.disabled = true;
      }

      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 25000);

      try {
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password,
        );

        const idToken = await userCredential.user.getIdToken();

        const response = await fetch(form.action, {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${idToken}`,
          },
          signal: controller.signal,
        });

        clearTimeout(timeout);

        // Redirect to dashboard on successful sign-in
        if (response.ok) {
          window.location.href = '/dashboard/';
          return;
        }

        // Show error message on failure
        const errorText = await response.text();

        errorDisplay.textContent = errorText
          ? `*${errorText}`
          : '*Error signing in';
        errorDisplay.classList.remove('opacity-0');
      } catch (error: any) {
        if (error.name === 'AbortError') {
          errorDisplay.textContent = '*Request timed out. Please try again.';
        } else {
          errorDisplay.textContent = '*Error signing in';
        }
        errorDisplay.classList.remove('opacity-0');
      } finally {
        isSubmitting = false;
        if (submitButton) submitButton.disabled = false;
      }
    });
  }

  document.addEventListener('astro:page-load', initializeSignInForm);
</script>
