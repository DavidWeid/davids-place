---
import { app } from '../firebase/server';
import { getAuth } from 'firebase-admin/auth';
import Base from '@layouts/Base.astro';

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has('__session')) {
  const sessionCookie = Astro.cookies.get('__session')!.value;
  try {
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect('/dashboard/');
    }
  } catch (error) {
    // Invalid or expired session cookie - clear it and continue to sign in page
    Astro.cookies.delete('__session', { path: '/' });
  }
}
---

<Base title="Sign in">
  <h1>Sign in</h1>

  <p>New here? <a href="/register/">Create an account</a></p>

  <form id="sign-in-form" action="/api/auth/sign-in" method="post">
    <label for="email" for="email">Email</label>
    <input type="email" name="email" id="email" required />

    <label for="password">Password</label>
    <input type="password" name="password" id="password" required />

    <button type="submit">Login</button>
  </form>

  <p id="sign-in-error" class="hidden"></p>
</Base>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from 'firebase/auth';
  import { app } from '../firebase/client';

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  const form = document.getElementById('sign-in-form') as HTMLFormElement;
  const errorDisplay = document.getElementById(
    'sign-in-error',
  ) as HTMLParagraphElement;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();

    if (!email || !password) {
      return;
    }

    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password,
      );

      const idToken = await userCredential.user.getIdToken();

      const response = await fetch(form.action, {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      // Redirect to dashboard on successful sign-in
      if (response.ok) {
        window.location.href = '/dashboard/';
        return;
      }

      const errorText = await response.text();
      errorDisplay.textContent = errorText || 'Error signing in';
      errorDisplay.classList.remove('hidden');
    } catch (error: any) {
      errorDisplay.textContent = 'Network or unexpected error';
      errorDisplay.classList.remove('hidden');
    }
  });
</script>
