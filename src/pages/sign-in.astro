---
import { app } from '../firebase/server';
import { getAuth } from 'firebase-admin/auth';
import Base from '@layouts/Base.astro';
import IconArrowRightBlue from '@images/icons/arrow-bubbles-right-blue.svg';
import IconArrowRightGreen from '@images/icons/arrow-bubbles-right-green.svg';

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has('__session')) {
  const sessionCookie = Astro.cookies.get('__session')!.value;
  try {
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect('/dashboard/');
    }
  } catch (error) {
    // Invalid or expired session cookie - clear it and continue to sign in page
    Astro.cookies.delete('__session', { path: '/' });
  }
}
---

<Base
  title="Sign in"
  description="Sign in to your account at Davidâ€™s Place to access your content and features."
  classes="flex flex-col justify-center"
>
  <header class="container relative w-max">
    <span class="spacer-40-80-80"></span>

    <h1>Sign in to your account</h1>

    <p class="text-p-main pt-8 flex flex-wrap gap-4">
      <span>New here?</span>
      <a href="/register/" class="content-link-gradient w-max font-sans-syne"
        >Create an account</a
      >
    </p>

    <span class="spacer-40-80-80"></span>
  </header>

  <section
    class="container bg-green-dark dark:bg-blue-dark flex-grow rounded-t-4xl laptop:rounded-none"
  >
    <span class="block pb-14 tablet:pb-20"></span>
    <form
      id="sign-in-form"
      action="/api/auth/sign-in"
      method="post"
      class="relative bg-medium dark:bg-medium/90 text-light tablet:max-w-[768px] tablet:mx-auto p-8 rounded-4xl laptop:rounded-none flex flex-col gap-8 shadow-[0_0_30px_-5px_rgba(0,0,0,0.75)] opacity-95"
    >
      <p class="pt-4 font-sans-syne text-lg">
        Sign in with your email and password
      </p>

      <span class="relative group">
        <label
          for="email"
          class="absolute transition-[top,font-size,color,letter-spacing,font-weight] duration-500"
          >Email</label
        >
        <input
          type="email"
          name="email"
          id="email"
          required
          autocomplete="email"
          class="text-lg w-full border-b border-gray-300 pb-px focus-visible:border-green-emerald focus-visible:ring-0 transition-[border-color] duration-500 group-focus-within:border-b-2 group-focus-within:pb-0"
        />
      </span>

      <span class="relative group">
        <label
          for="password"
          class="absolute transition-[top,font-size,color,letter-spacing,font-weight] duration-500"
          >Password</label
        >
        <input
          type="password"
          name="password"
          id="password"
          required
          autocomplete="current-password"
          class="text-lg w-full border-b border-gray-300 pb-px focus-visible:border-green-emerald focus-visible:ring-0 transition-[border-color] duration-500 group-focus-within:border-b-2 group-focus-within:pb-0"
        />
      </span>

      <button
        type="submit"
        class="group inline-block w-max mt-4 font-bold text-lg tracking-wide px-5 py-2 text-light shadow-2xl shadow-dark bg-green-darker hover:bg-blue-darker dark:bg-blue-darker dark:hover:bg-green-darker rounded-4xl active:brightness-75 disabled:brightness-75 disabled:bg-blue-darker dark:disabled:bg-green-darker transition-colors duration-500 outline-1 outline-light"
      >
        <span class="flex items-center gap-2">
          <span>LOG IN</span>
          <IconArrowRightGreen
            class="hidden dark:flex relative right-0 h-5 w-5 group-hover:-right-1.5 group-disabled:-right-1.5 transition-[right] duration-500"
          />
          <IconArrowRightBlue
            class="flex dark:hidden relative right-0 h-5 w-5 group-hover:-right-1.5 group-disabled:-right-1.5 transition-[right] duration-500"
          />
        </span>
      </button>

      <p
        id="sign-in-error"
        class="opacity-0 text-red-500 tracking-tight font-mono font-bold text-lg leading-8 transition-opacity duration-500"
      >
        *Error signing in
      </p>
    </form>

    <span class="block pb-14 tablet:pb-20"></span>
  </section>
</Base>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from 'firebase/auth';
  import { app } from '../firebase/client';

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  function initializeSignInForm() {
    const form = document.getElementById('sign-in-form') as HTMLFormElement;
    const errorDisplay = document.getElementById(
      'sign-in-error',
    ) as HTMLParagraphElement;

    if (!form || !errorDisplay) {
      console.warn('Sign-in form or error display not found');
      return;
    }

    const formInputs = form.querySelectorAll(
      'input',
    ) as NodeListOf<HTMLInputElement>;

    // Cache labels by input id for better perf
    const labelMap = new Map<string, HTMLElement | null>();
    formInputs.forEach((input) => {
      labelMap.set(input.id, form.querySelector(`label[for="${input.id}"]`));
    });

    const styleLabel = (label: Element, isActive: boolean) => {
      if (isActive) {
        label.classList.add(
          'text-[12px]',
          '-top-4',
          'text-green-emerald',
          'tracking-wider',
          'font-bold',
        );
        label.classList.remove('text-[16px]', 'leading-4', 'top-0');
      } else {
        label.classList.remove(
          'text-[12px]',
          '-top-4',
          'text-green-emerald',
          'tracking-wider',
          'font-bold',
        );
        label.classList.add('text-[16px]', 'leading-4', 'top-0');
      }
    };

    // On focus, make label "active"
    formInputs.forEach((input) => {
      const label = labelMap.get(input.id) || null;

      input.addEventListener('focus', () => {
        if (label) styleLabel(label, true);
      });

      // On blur, if input is empty, make label inactive
      input.addEventListener('blur', () => {
        if (label) styleLabel(label, !!input.value);
      });

      // Initialize label from current value
      if (label) styleLabel(label, !!input.value);
    });

    // Hide error message when user starts typing
    form.addEventListener('input', () => {
      errorDisplay.classList.add('opacity-0');
    });

    // Prevent duplicate submits, use timeout for fetch
    let isSubmitting = false;
    const submitButton = form.querySelector(
      'button[type="submit"]',
    ) as HTMLButtonElement;

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const email = formData.get('email')?.toString();
      const password = formData.get('password')?.toString();

      if (!email || !password) {
        return;
      }

      if (isSubmitting) return;
      isSubmitting = true;

      if (submitButton) {
        submitButton.disabled = true;
      }

      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 25000);

      try {
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password,
        );

        const idToken = await userCredential.user.getIdToken();

        const response = await fetch(form.action, {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${idToken}`,
          },
          signal: controller.signal,
        });

        clearTimeout(timeout);

        // Redirect to dashboard on successful sign-in
        if (response.ok) {
          window.location.href = '/dashboard/';
          return;
        }

        // Show error message on failure
        const errorText = await response.text();

        errorDisplay.textContent = errorText
          ? `*${errorText}`
          : '*Error signing in';
        errorDisplay.classList.remove('opacity-0');
      } catch (error: any) {
        if (error.name === 'AbortError') {
          errorDisplay.textContent = '*Request timed out. Please try again.';
        } else {
          errorDisplay.textContent = '*Error signing in';
        }
        errorDisplay.classList.remove('opacity-0');
      } finally {
        isSubmitting = false;
        if (submitButton) submitButton.disabled = false;
      }
    });
  }

  document.addEventListener('astro:page-load', initializeSignInForm);
  initializeSignInForm();
</script>
