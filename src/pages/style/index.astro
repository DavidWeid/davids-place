---
import Base from '@layouts/Base.astro';
import Hero from '@components/Hero.astro';
import SvgGenerator from '@components/SvgGenerator.astro';
import IconArrowBubblesRightGreen from '@images/icons/arrow-bubbles-right-green.svg';

const astroImageFiles = import.meta.glob('../../images/astro/*.svg');
const iconImageFiles = import.meta.glob('../../images/icons/*.svg');

const pageTitle = 'Style Visualization';
const heroTitle =
  "<span class='text-gradient block'>Style Visualization</span>";
const heroDescription = '';

const extractAstroName = (string: string) => {
  const match = string.match(/astro-\d+/);
  return match ? match[0] : null;
};

const extractAstroNumber = (string: string) => {
  const match = string.match(/astro-(\d+)/);
  return match ? match[1] : '0';
};

const extractFileName = (string: string) => {
  const regex = /([^/]+)(?=\.\w+$)/;
  const match = string.match(regex);
  return match ? match[0] : null;
};

const customColors: { [key: string]: string | { [key: string]: string } } = {
  dark: '#13151a',
  light: '#f5f5f5',
  medium: '#23262d',
  accent: '#883aea',
  'accent-light': '#e0ccfa',
  'accent-dark': '#310a65',
  red: {
    dark: '#C84B44',
    light: '#F8756A',
  },
  blue: {
    dark: '#3844C6',
    light: '#5C68F3',
  },
  green: {
    dark: '#2e9c51',
    emerald: '#50C878',
    light: '#9fdeb0',
  },
};

const orderClasses: { [key: string]: string } = {
  1: 'order-1',
  2: 'order-2',
  3: 'order-3',
  4: 'order-4',
  5: 'order-5',
  6: 'order-6',
  7: 'order-7',
  8: 'order-8',
  9: 'order-9',
  10: 'order-10',
  11: 'order-11',
  12: 'order-12',
  13: 'order-13',
  14: 'order-14',
  15: 'order-15',
  16: 'order-16',
  17: 'order-17',
  18: 'order-18',
  19: 'order-19',
  20: 'order-20',
};
---

<Base title={pageTitle} indexForSearch={false} includeSearchComponent={false}>
  <Hero title={heroTitle} description={heroDescription} />

  <section class="container">
    <h2 class="pb-8">Gradient Borders</h2>

    <p class="text-p-main laptop:max-w-[85vw]">
      One way to create gradient borders is by using a parent element with a
      gradient background — <code class="dark-background"
        >background-image: linear-gradient()</code
      > — and a padding of desired border colors and width. Then, the child has a
      background color of its own.
    </p>

    <span class="tablet:pb-4 block pb-8"></span>

    <div
      class="tablet:flex-row tablet:gap-15 flex flex-col items-center gap-10"
    >
      <div
        class="from-green-emerald to-blue-dark text-light flex h-12 w-[150px] items-center justify-center bg-linear-to-r p-1"
      >
        Parent element
      </div>

      <div class="tablet:flex tablet:gap-15 relative">
        <span class="tablet:static absolute bottom-0 -left-8 text-4xl">+</span>

        <div
          class="bg-dark text-light dark:bg-light dark:text-dark flex h-12 w-[150px] items-center justify-center px-4 py-2"
        >
          Child element
        </div>
      </div>

      <span class="tablet:block hidden text-4xl">=</span>

      <span class="tablet:hidden block w-3/4 border-2"></span>

      <div
        class="from-green-emerald to-blue-dark h-12 w-[150px] bg-linear-to-r p-1"
      >
        <p
          class="bg-dark text-light dark:bg-light dark:text-dark flex h-full w-full items-center justify-center"
        >
          Result
        </p>
      </div>
    </div>

    <span class="tablet:pb-4 block pb-8"></span>

    <p class="text-p-main laptop:max-w-[85vw]">
      Border radius works, but can use some finessing to get it to look visually
      correct. Here the parent has a border-radius of 12px while the child's is
      8px.
    </p>

    <span class="tablet:pb-4 block pb-8"></span>

    <div
      class="from-green-emerald to-blue-dark h-12 w-[150px] rounded-xl bg-linear-to-r p-1"
    >
      <p
        class="bg-dark text-light dark:bg-light dark:text-dark flex h-full w-full items-center justify-center rounded-lg"
      >
        Rounded
      </p>
    </div>

    <span class="tablet:pb-4 block pb-8"></span>

    <p class="text-p-main laptop:max-w-[85vw]">
      And if the background matches the page, it looks "transparent" (even
      though it definitely is not).
    </p>

    <span class="tablet:pb-4 block pb-8"></span>

    <div
      class="from-green-emerald to-blue-dark h-12 w-[150px] rounded-xl bg-linear-to-r p-1"
    >
      <p
        class="bg-light text-dark dark:bg-dark dark:text-light flex h-full w-full items-center justify-center rounded-lg"
      >
        "Transparent"
      </p>
    </div>

    <span class="tablet:pb-8 block pb-16"></span>

    <p class="text-p-main laptop:max-w-[85vw]">
      Another method is to use a transparent border with <code
        class="dark-background">border-image</code
      > and
      <code class="dark-background">border-image-slice</code>. This is actually
      easier than above, as you're dealing with just border properties on the
      parent element. And it's transparent by default. However, rounded borders
      won't work.
    </p>

    <span class="tablet:pb-4 block pb-8"></span>

    <div
      class="flex h-12 w-[150px] items-center justify-center rounded-xl border-4 border-transparent"
      style="border-image: linear-gradient(to right, var(--color-green-emerald), var(--color-blue-dark)); border-image-slice: 1;"
    >
      Result
    </div>

    <!-- TODO: Rounded gradient border with transparent inside -->
  </section>

  <span class="block pb-16"></span>

  <hr class="green-shimmer-slow h-1 border-0" />

  <span class="block pb-16"></span>

  <section class="container">
    <details
      class="group/details tablet:scroll-mt-20 scroll-mt-24"
      name="colors"
    >
      <summary
        class="group/summary tablet:w-max border-green-emerald hover:text-green-dark flex w-full min-w-[25%] items-center justify-between border-b-2 py-3"
        ><h2 class="inline">Custom Colors</h2>
        <IconArrowBubblesRightGreen
          class="h-6 w-6 rotate-90 transition-transform duration-500 group-open/details:-rotate-90 group-hover/summary:scale-125"
        /></summary
      >
      <div
        class="tablet:grid-cols-4 laptop:grid-cols-6 tablet:gap-8 grid grid-cols-2 gap-6 p-6"
      >
        {
          Object.keys(customColors).map((color) => {
            if (typeof customColors[color] === 'string') {
              return (
                <div class="flex flex-col items-center gap-2 p-6">
                  <div
                    class="h-20 w-20 rounded-full"
                    style={`background-color: ${customColors[color]}`}
                  />

                  <p class="px-2 text-center text-sm select-text">{color}</p>
                </div>
              );
            } else {
              return Object.keys(customColors[color]).map((shade) => {
                return (
                  <div class="flex flex-col items-center gap-2 p-6">
                    <div
                      class="h-20 w-20 rounded-full"
                      style={`background-color: ${(customColors[color] as { [key: string]: string })[shade]}`}
                    />

                    <p class="px-2 text-center text-sm select-text">{`${color} - ${shade}`}</p>
                  </div>
                );
              });
            }
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>

    <details
      class="group/details tablet:scroll-mt-20 scroll-mt-24"
      name="images-astro"
    >
      <summary
        class="group/summary tablet:w-max border-green-emerald hover:text-green-dark flex w-full min-w-[25%] items-center justify-between border-b-2 py-3"
        ><h2 class="inline">Astro SVGs</h2>
        <IconArrowBubblesRightGreen
          class="h-6 w-6 rotate-90 transition-transform duration-500 group-open/details:-rotate-90 group-hover/summary:scale-125"
        /></summary
      >
      <div
        class="tablet:grid-cols-4 laptop:grid-cols-6 tablet:gap-8 grid grid-cols-2 gap-6 p-6"
      >
        {
          Object.keys(astroImageFiles).map((astroImage) => {
            if (!extractAstroName(astroImage)) {
              return;
            }
            return (
              <div
                class={`flex flex-col items-center gap-2 ${extractAstroNumber(astroImage) ? orderClasses[extractAstroNumber(astroImage)] : ''} bg-medium text-light rounded-full p-6 brightness-110`}
              >
                <SvgGenerator
                  svg={`astro/${extractAstroName(astroImage)}`}
                  className="h-20 w-auto"
                />

                <p class="px-2 text-center text-sm select-text">
                  {extractAstroName(astroImage)}
                </p>
              </div>
            );
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>

    <details
      class="group/details tablet:scroll-mt-20 scroll-mt-24"
      name="images-icons"
    >
      <summary
        class="group/summary tablet:w-max border-green-emerald hover:text-green-dark flex w-full min-w-[25%] items-center justify-between border-b-2 py-3"
        ><h2 class="inline">Icon SVGs</h2>
        <IconArrowBubblesRightGreen
          class="h-6 w-6 rotate-90 transition-transform duration-500 group-open/details:-rotate-90 group-hover/summary:scale-125"
        /></summary
      >
      <div
        class="tablet:grid-cols-4 laptop:grid-cols-6 tablet:gap-8 grid grid-cols-2 gap-6 p-6"
      >
        {
          Object.keys(iconImageFiles).map((iconImage) => {
            if (!extractFileName(iconImage)) {
              return;
            }
            return (
              <div class="bg-medium text-light flex flex-col items-center gap-2 rounded-full p-6 brightness-110">
                <SvgGenerator
                  svg={`icons/${extractFileName(iconImage)}`}
                  className="aspect-square w-12 h-12"
                />

                <p class="px-2 text-center text-sm select-text">
                  {extractFileName(iconImage)}
                </p>
              </div>
            );
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>
  </section>
</Base>
