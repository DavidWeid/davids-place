---
import Base from '@layouts/Base.astro';
import Hero from '@components/Hero.astro';
import SvgGenerator from '@components/SvgGenerator.astro';

const astroImageFiles = import.meta.glob('../../images/astro/*.svg');
const iconImageFiles = import.meta.glob('../../images/icons/*.svg');

const pageTitle = 'Style Visualization';
const heroTitle =
  "<span class='text-gradient block'>Style Visualization</span>";
const heroDescription = '';

const extractAstroName = (string: string) => {
  const match = string.match(/astro-\d+/);
  return match ? match[0] : null;
};

const extractAstroNumber = (string: string) => {
  const match = string.match(/astro-(\d+)/);
  return match ? match[1] : '0';
};

const extractFileName = (string: string) => {
  const regex = /([^/]+)(?=\.\w+$)/;
  const match = string.match(regex);
  return match ? match[0] : null;
};

const customColors: { [key: string]: string | { [key: string]: string } } = {
  dark: '#13151a',
  light: '#f5f5f5',
  medium: '#23262d',
  accent: '#883aea',
  'accent-light': '#e0ccfa',
  'accent-dark': '#310a65',
  red: {
    dark: '#C84B44',
    light: '#F8756A',
  },
  blue: {
    dark: '#3844C6',
    light: '#5C68F3',
  },
  green: {
    dark: '#2e9c51',
    emerald: '#50C878',
    light: '#9fdeb0',
  },
};

const orderClasses: { [key: string]: string } = {
  1: 'order-1',
  2: 'order-2',
  3: 'order-3',
  4: 'order-4',
  5: 'order-5',
  6: 'order-6',
  7: 'order-7',
  8: 'order-8',
  9: 'order-9',
  10: 'order-10',
  11: 'order-11',
  12: 'order-12',
  13: 'order-13',
  14: 'order-14',
  15: 'order-15',
  16: 'order-16',
  17: 'order-17',
  18: 'order-18',
  19: 'order-19',
  20: 'order-20',
};
---

<Base title={pageTitle} indexForSearch={false} includeSearchComponent={false}>
  <Hero title={heroTitle} description={heroDescription} />

  <section class="container">
    <details class="scroll-mt-24 tablet:scroll-mt-20" name="colors">
      <summary
        class="group flex items-center justify-between w-full tablet:w-max min-w-[25%] py-3 border-b-2 border-green-emerald hover:text-green-dark"
        ><h2 class="inline">Custom Colors</h2>
        <SvgGenerator
          svg="icons/arrow-bubbles-right-green"
          className="w-6 h-6 rotate-90 group-hover:scale-125 transition-transform duration-500"
        /></summary
      >
      <div
        class="p-6 rounded-lg grid grid-cols-2 tablet:grid-cols-4 laptop:grid-cols-6 gap-6 tablet:gap-8"
      >
        {
          Object.keys(customColors).map((color) => {
            if (typeof customColors[color] === 'string') {
              return (
                <div class="flex flex-col gap-2 items-center p-6">
                  <div
                    class="h-20 w-20 rounded-full"
                    style={`background-color: ${customColors[color]}`}
                  />

                  <p class="text-sm text-center px-2 select-text">{color}</p>
                </div>
              );
            } else {
              return Object.keys(customColors[color]).map((shade) => {
                return (
                  <div class="flex flex-col gap-2 items-center p-6">
                    <div
                      class="h-20 w-20 rounded-full"
                      style={`background-color: ${(customColors[color] as { [key: string]: string })[shade]}`}
                    />

                    <p class="text-sm text-center px-2 select-text">{`${color} - ${shade}`}</p>
                  </div>
                );
              });
            }
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>

    <details class="scroll-mt-24 tablet:scroll-mt-20" name="images">
      <summary
        class="group flex items-center justify-between w-full tablet:w-max min-w-[25%] py-3 border-b-2 border-green-emerald hover:text-green-dark"
        ><h2 class="inline">Astro SVGs</h2>
        <SvgGenerator
          svg="icons/arrow-bubbles-right-green"
          className="w-6 h-6 rotate-90 group-hover:scale-125 transition-transform duration-500"
        /></summary
      >
      <div
        class="p-6 rounded-lg grid grid-cols-2 tablet:grid-cols-4 laptop:grid-cols-6 gap-6 tablet:gap-8"
      >
        {
          Object.keys(astroImageFiles).map((astroImage) => {
            if (!extractAstroName(astroImage)) {
              return;
            }
            return (
              <div
                class={`flex flex-col gap-2 items-center ${extractAstroNumber(astroImage) ? orderClasses[extractAstroNumber(astroImage)] : ''} brightness-110 bg-medium text-light p-6 rounded-full`}
              >
                <SvgGenerator
                  svg={`astro/${extractAstroName(astroImage)}`}
                  className="h-20 w-auto"
                />

                <p class="text-sm text-center px-2 select-text">
                  {extractAstroName(astroImage)}
                </p>
              </div>
            );
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>

    <details class="scroll-mt-24 tablet:scroll-mt-20" name="images">
      <summary
        class="group flex items-center justify-between w-full tablet:w-max min-w-[25%] py-3 border-b-2 border-green-emerald hover:text-green-dark"
        ><h2 class="inline">Icon SVGs</h2>
        <SvgGenerator
          svg="icons/arrow-bubbles-right-green"
          className="w-6 h-6 rotate-90 group-hover:scale-125 transition-transform duration-500"
        /></summary
      >
      <div
        class="p-6 rounded-lg grid grid-cols-2 tablet:grid-cols-4 laptop:grid-cols-6 gap-6 tablet:gap-8"
      >
        {
          Object.keys(iconImageFiles).map((iconImage) => {
            if (!extractFileName(iconImage)) {
              return;
            }
            return (
              <div class="flex flex-col gap-2 items-center brightness-110 bg-medium text-light p-6 rounded-full">
                <SvgGenerator
                  svg={`icons/${extractFileName(iconImage)}`}
                  className="aspect-square w-12 h-12"
                />

                <p class="text-sm text-center px-2 select-text">
                  {extractFileName(iconImage)}
                </p>
              </div>
            );
          })
        }
      </div>
    </details>

    <span class="block pb-16"></span>
  </section>

  <script>
    const details = document.querySelectorAll('details');

    details.forEach((targetDetail) => {
      targetDetail.addEventListener('toggle', () => {
        details.forEach((detail) => {
          if (detail === targetDetail && detail.open) {
            const summaryIcon = detail.querySelector('svg');
            summaryIcon?.classList.replace('rotate-90', '-rotate-90');
            detail.scrollIntoView({ behavior: 'smooth', block: 'start' });
          } else if (detail === targetDetail && !detail.open) {
            const summaryIcon = detail.querySelector('svg');
            summaryIcon?.classList.replace('-rotate-90', 'rotate-90');
          }
        });
      });
    });
  </script>
</Base>
