---
import Base from '@layouts/Base.astro';
import Hero from '@components/Hero.astro';
import ImageRecipe from '@components/ImageRecipe.astro';
import ExternalLink from '@components/ExternalLink.astro';

interface Props {
  frontmatter: {
    title: string;
    description: string;
    source: string;
    image: {
      url: string;
      alt: string;
    };
    tags: string[];
    servings: string;
    prepTime: string;
    cookTime: string;
    totalTime: string;
    ingredients: { category: string; items: string[] }[];
    instructions: string[];
  };
}

const { frontmatter } = Astro.props;
const {
  title,
  description,
  source,
  image,
  tags,
  servings,
  prepTime,
  cookTime,
  totalTime,
  ingredients,
  instructions,
} = frontmatter;
const pageTitle = `Cookbook Recipe: ${title}`;
const heroTitle = title;
const heroDescription = description;
const heroData = [
  { label: 'PREP TIME', value: prepTime },
  { label: 'COOK TIME', value: cookTime },
  { label: 'TOTAL TIME', value: totalTime },
  { label: 'SERVINGS', value: servings },
];
---

<Base title={pageTitle}>
  <Hero title={heroTitle} description={heroDescription}>
    <span class="block pb-4"></span>
    <div class="flex flex-wrap justify-center gap-8">
      {
        heroData.map(({ label, value }) => (
          <span class="flex flex-col items-center gap-0.5">
            <span class="text-gradient text-lg font-bold">{label}</span>
            {value}
          </span>
        ))
      }
    </div>
    <span class="block pb-8"></span>
    {
      image && (
        <ImageRecipe
          src={image.url}
          alt={image.alt}
          class="rounded-6-8-12 h-96 object-cover"
          loading="eager"
        />
      )
    }
  </Hero>

  <hr class="green-blue-shimmer-slow h-1 border-0" />

  <div
    data-tags={`| tags: ${tags.join(', ')}`}
    data-pagefind-index-attrs="data-tags"
    class="bg-light dark:bg-medium"
  >
    <div class="container">
      <span class="block pb-8"></span>

      <section class="laptop:grid-cols-3 relative grid grid-cols-1 gap-8">
        {
          ingredients && (
            <fieldset class="laptop:overflow-y-auto laptop:max-h-[75vh] laptop:sticky laptop:top-28 rounded-6-8-12">
              <legend data-pagefind-ignore="all">
                <h2>Ingredients</h2>
                <span class="block py-2 pl-1 text-xs tracking-wide opacity-75">
                  Click to check off
                </span>
              </legend>
              <div
                id="ingredients-container"
                class="bg-light bg-opacity-90 dark:bg-dark dark:bg-opacity-50 rounded-6-8-12 flex flex-col gap-8 p-4"
              >
                {ingredients.map((data) => {
                  const { category, items } = data;
                  return (
                    <div class="flex flex-col gap-2">
                      <h3>{category.toUpperCase()}</h3>
                      <hr class="border-green-emerald w-1/4" />
                      {items.map((ingredient, index) => {
                        return (
                          <div>
                            <input
                              id={
                                category.toLowerCase() + '-ingredient-' + index
                              }
                              type="checkbox"
                              class="peer sr-only"
                            />
                            <label
                              for={
                                category.toLowerCase() + '-ingredient-' + index
                              }
                              class="peer-checked:text-blue-dark/50 dark:peer-checked:text-light/40 hover:text-blue-dark dark:hover:text-green-emerald"
                            >
                              {ingredient}
                            </label>
                          </div>
                        );
                      })}
                    </div>
                  );
                })}
              </div>
            </fieldset>
          )
        }

        <button
          id="pin-button"
          class="laptop:hidden bg-green-dark text-light hover:bg-blue-dark tablet:rounded-lg fixed right-5 bottom-5 z-40 rounded-md px-4 py-2 transition-all duration-500"
          data-state="unpinned"
        >
          Pin Ingredients
        </button>

        {
          instructions && (
            <div class="laptop:col-span-2">
              <h2>Instructions</h2>
              {/* TODO: Add collapsable item functionality */}
              <span class="invisible block pb-2 pl-1 text-xs tracking-wide opacity-75">
                Click to collapse
              </span>
              <span class="block pb-8" />
              <ol class="flex flex-col gap-6">
                {instructions.map((instruction, index) => (
                  <li class="flex flex-col gap-2">
                    <span class="text-dark/75 dark:text-light/85 text-xl font-bold tracking-wider">
                      Step {index + 1}
                    </span>
                    <span class="max-w-prose leading-7">{instruction}</span>
                    <hr class="border-green-emerald w-1/4" />
                  </li>
                ))}
              </ol>
            </div>
          )
        }
        <span class="block pb-8"></span>
      </section>

      <span class="block pb-8"></span>

      <section>
        <slot />
      </section>

      {!source && <span class="block pb-[200px]" />}

      {
        source && (
          <>
            <section class="pt-20 opacity-90">
              <h2>See the original recipe</h2>
              <span class="block pb-4" />
              <ExternalLink href={source} text={source} />
            </section>
            <span class="block pb-[200px]" />
          </>
        )
      }
    </div>
  </div>

  <hr class="green-blue-shimmer-slow h-1 border-0" />
</Base>

<script>
  document.addEventListener('astro:page-load', () => {
    const ingredientsContainer = document.getElementById(
      'ingredients-container',
    );
    const pinButton = document.getElementById('pin-button');

    const pinIngredients = () => {
      if (ingredientsContainer) {
        ingredientsContainer.classList.add(
          'fixed',
          'z-40',
          'top-5',
          'right-5',
          'bg-opacity-100!',
          'max-h-[75vh]',
          'overflow-auto',
          'border',
          'border-green-emerald',
        );
      }

      if (pinButton) {
        pinButton.dataset.state = 'pinned';
        pinButton.textContent = 'Unpin Ingredients';
      }
    };

    const unpinIngredients = () => {
      if (ingredientsContainer) {
        ingredientsContainer.classList.remove(
          'fixed',
          'top-5',
          'right-5',
          'bg-opacity-100!',
          'max-h-[75vh]',
          'overflow-auto',
          'border',
          'border-green-emerald',
        );
      }

      if (pinButton) {
        pinButton.dataset.state = 'unpinned';
        pinButton.textContent = 'Pin Ingredients';
      }
    };

    const handlePinButtonClick = (e: Event) => {
      const target = e.target as HTMLElement;
      if (target && target.dataset.state === 'unpinned') {
        // Pin ingredients (plus update button)
        pinIngredients();
      } else {
        // Unpin ingredients (plus update button)
        unpinIngredients();
      }
    };

    const handleScreenResize = () => {
      if (window.outerWidth >= 1024) {
        // Unpin ingredients (plus update button)
        if (pinButton) {
          unpinIngredients();
        }
      }
    };

    if (ingredientsContainer && pinButton) {
      pinButton.addEventListener('click', handlePinButtonClick);
      window.addEventListener('resize', handleScreenResize);
    }
  });
</script>
